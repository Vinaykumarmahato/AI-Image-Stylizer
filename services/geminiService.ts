
import { GoogleGenAI, Modality, GenerateContentResponse } from '@google/genai';
import { fileToBase64, getMimeType } from '../utils/fileUtils';

// Ensure the API key is available, but do not hardcode it.
if (!process.env.API_KEY) {
    console.warn("API_KEY environment variable not set. Using a placeholder. Please set your API key.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

/**
 * Edits an image using the Gemini AI model.
 * @param imageFile The image file to edit.
 * @param prompt The text prompt describing the desired edits.
 * @returns A promise that resolves to the base64 encoded string of the generated image.
 */
export const editImageWithAI = async (imageFile: File, prompt: string): Promise<string> => {
    try {
        const base64ImageData = await fileToBase64(imageFile);
        const mimeType = getMimeType(imageFile);

        const response: GenerateContentResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image-preview',
            contents: {
                parts: [
                    {
                        inlineData: {
                            data: base64ImageData,
                            mimeType: mimeType,
                        },
                    },
                    {
                        text: prompt,
                    },
                ],
            },
            config: {
                // The model for image editing requires both IMAGE and TEXT modalities in the response.
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        // The response can contain multiple parts (text and image). We need to find the image part.
        for (const part of response.candidates[0].content.parts) {
            if (part.inlineData && part.inlineData.data) {
                // Return the base64 string of the generated image
                return part.inlineData.data;
            }
        }

        // If no image part is found, check for a text response which might contain an error or explanation.
        for (const part of response.candidates[0].content.parts) {
            if (part.text) {
                 throw new Error(`AI returned text instead of an image: "${part.text}"`);
            }
        }
        
        throw new Error('No image was generated by the AI. The response was empty.');

    } catch (error) {
        console.error('Error calling Gemini API:', error);
        // Re-throw a more user-friendly error message
        throw new Error('Failed to generate image. The AI service may be busy or an error occurred. Please try again.');
    }
};
